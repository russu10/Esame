METODI NX
üß± Aggiunta di nodi e archi
Metodo	Esempio
add_node	G.add_node(4) # Aggiunge un nodo 4 al grafo
add_nodes_from	G.add_nodes_from([4, 5]) # Aggiunge pi√π nodi
add_edge	G.add_edge(4, 5) # Aggiunge un arco tra 4 e 5
add_edges_from	G.add_edges_from([(4, 5), (5, 6)]) # Aggiunge pi√π archi
add_weighted_edges_from	G.add_weighted_edges_from([(1, 2, 0.5)]) # Arco con peso

üîç Accesso e interrogazioni
Metodo	Esempio
adjacency	list(G.adjacency()) # Restituisce gli adiacenti di ogni nodo
edges	list(G.edges()) # Lista di archi
nodes	list(G.nodes()) # Lista di nodi
degree	list(G.degree()) # Grado di ogni nodo
neighbors	list(G.neighbors(1)) # Vicini del nodo 1

üîÑ Modifica e gestione
Metodo	Esempio
clear	G.clear() # Rimuove tutti i nodi e archi
clear_edges	G.clear_edges() # Rimuove solo gli archi
remove_node	G.remove_node(3) # Rimuove il nodo 3
remove_nodes_from	G.remove_nodes_from([1, 2]) # Rimuove pi√π nodi
remove_edge	G.remove_edge(1, 2) # Rimuove l'arco (1,2)
remove_edges_from	G.remove_edges_from([(1, 2), (2, 3)]) # Rimuove pi√π archi

‚ùì Verifiche e propriet√†
Metodo	Esempio
has_node	G.has_node(1) # True se il nodo esiste
has_edge	G.has_edge(1, 2) # True se l'arco esiste
is_directed	G.is_directed() # False per Graph (non orientato)
number_of_nodes	G.number_of_nodes() # Numero di nodi
number_of_edges	G.number_of_edges() # Numero di archi

üîß Conversioni e copie
Metodo	Esempio
copy	H = G.copy() # Crea una copia del grafo
subgraph	H = G.subgraph([1, 2]) # Sottografo indotto da [1, 2]
to_directed	DG = G.to_directed() # Converte in grafo orientato
to_undirected	UG = G.to_undirected() # Converte in grafo non orientato

üèóÔ∏è Fabbriche (usate raramente direttamente)
Metodo	Esempio
adjlist_inner_dict_factory	G.adjlist_inner_dict_factory() # Metodo interno di costruzione dizionario
adjlist_outer_dict_factory	G.adjlist_outer_dict_factory() # Come sopra, livello esterno

ALGORITMI DI NX
 COMPONENTI CONNESSE
Richiede grafi non orientati (oppure si usano versioni "fortemente connesse" per grafi orientati)

Funzione	Esempio	Descrizione
nx.is_connected(G)	nx.is_connected(G)	True se il grafo √® connesso
nx.connected_components(G)	list(nx.connected_components(G))	Insiemi di nodi delle componenti
nx.number_connected_components(G)	nx.number_connected_components(G)	Numero totale di componenti
nx.node_connected_component(G, n)	nx.node_connected_component(G, 1)	Componente che include il nodo 1

üîÅ Per grafi orientati, usa:

nx.is_strongly_connected(DG)

nx.strongly_connected_components(DG)

nx.is_weakly_connected(DG)

üö∂ CAMMINI MINIMI
Funziona sia su grafi orientati che non orientati

Funzione	Esempio	Descrizione
nx.shortest_path(G, source, target)	nx.shortest_path(G, 1, 5)	Cammino pi√π breve (non pesato)
nx.shortest_path_length(G, source, target)	nx.shortest_path_length(G, 1, 5)	Lunghezza del cammino
nx.all_shortest_paths(G, s, t)	list(nx.all_shortest_paths(G, 1, 5))	Tutti i cammini pi√π brevi
nx.single_source_shortest_path(G, s)	nx.single_source_shortest_path(G, 1)	Tutti i cammini da 1
nx.single_source_shortest_path_length(G, s)	nx.single_source_shortest_path_length(G, 1)	Lunghezze da 1
nx.shortest_path(G, weight='peso')	nx.shortest_path(G, 1, 5, weight='distanza')	Cammino pi√π breve con pesi
nx.dijkstra_path(G, 1, 5)	Cammino minimo con pesi usando Dijkstra	
nx.bellman_ford_path(G, 1, 5)	Supporta pesi negativi	

üå≥ ALBERI E MINIMI CAMMINI
Funzione	Esempio	Descrizione
nx.minimum_spanning_tree(G)	T = nx.minimum_spanning_tree(G)	Albero di copertura minimo
nx.dfs_tree(G, source)	T = nx.dfs_tree(G, 0)	Albero DFS dal nodo sorgente
nx.bfs_tree(G, source)	T = nx.bfs_tree(G, 0)	Albero BFS dal nodo sorgente

üîÑ CICLI E ANELLI
Funzione	Esempio	Descrizione
nx.find_cycle(G)	nx.find_cycle(G)	Ritorna un ciclo nel grafo
nx.simple_cycles(DG)	list(nx.simple_cycles(DG))	Tutti i cicli in un grafo orientato
nx.cycle_basis(G)	nx.cycle_basis(G)	Trova un insieme di base di cicli

üß† CENTRALIT√Ä (analisi dei nodi)
Funzione	Esempio	Descrizione
nx.degree_centrality(G)	nx.degree_centrality(G)	Centralit√† di grado
nx.closeness_centrality(G)	nx.closeness_centrality(G)	Vicinanza media
nx.betweenness_centrality(G)	nx.betweenness_centrality(G)	Quante volte un nodo √® "ponte"
nx.eigenvector_centrality(G)	nx.eigenvector_centrality(G)	Influenza complessiva
nx.pagerank(G)	nx.pagerank(G)	Versione del PageRank di Google

üìà COMPONENTI E STATI STRUTTURALI
Funzione	Esempio	Descrizione
nx.diameter(G)	nx.diameter(G)	Diametro del grafo
nx.radius(G)	nx.radius(G)	Raggio del grafo
nx.center(G)	nx.center(G)	Nodi centrali
nx.periphery(G)	nx.periphery(G)	Nodi pi√π distanti
nx.eccentricity(G)	nx.eccentricity(G)	Massima distanza da ogni nodo
